// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   email    String  @unique
//   hash     String
//   hashedRt String?

//   @@map("users")
//}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String
  role      String   @default("admin")

  @@map("admins")
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String   @unique
  name        String
  address     String?
  city        String?
  imageUrl    String?
  isConfirmed Boolean  @default(false)
  hash        String
  role        String   @default("client")

  @@map("clients")
}

model DeliveryMan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone     String?  @unique
  name      String?
  email     String   @unique
  hash      String?
  role      String   @default("deliveryman")

  @@map("deliverymans")
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  name      String
  city      String
  address   String
  managerId Int?     @unique
  manager   Manager? @relation(fields: [managerId], references: [id])
}

model Manager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String?
  name      String

  role       String      @default("manager")
  Restaurant Restaurant?

  @@map("managers")
}

model Meal {
  id Int @id @default(autoincrement())
  name String 
  price String 
  description String
  type String? @default("") // general OR specific
  categories CategoriesOnMeals[]
  @@map("meals")
}

model MealImage {
  id Int @id @default(autoincrement())
  url String
  mealId Int
  @@map("mealimages")
}

model Category {
  id Int @id @default(autoincrement())
  name String 

  meals CategoriesOnMeals[]
  @@map("categories")

}

model CategoriesOnMeals {
  meal Meal @relation(fields: [mealId], references: [id])
  mealId Int 
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int 

  @@id([mealId, categoryId])
}