// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   email    String  @unique
//   hash     String
//   hashedRt String?

//   @@map("users")
//}

model Admin {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String
  role      String   @default("admin")

  @@map("admins")
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String   @unique
  name        String
  longtitud   Float?
  latitud     Float?
  address     String?
  imageUrl    String?
  isConfirmed Boolean  @default(false)
  hash        String
  role        String   @default("client")

  orders Order[]

  @@map("clients")
}

model DeliveryMan {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  phone          String   @unique
  name           String?
  email          String?  @unique
  hash           String?
  accepted       Boolean  @default(false)
  requestMessage String?
  requestSent    Boolean  @default(false)
  role           String   @default("deliveryman")

  @@map("deliverymans")
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  name      String
  longtitud Float    @default(0)
  latitud   Float    @default(0)
  address   String
  managerId Int?     @unique
  manager   Manager? @relation(fields: [managerId], references: [id])
  Meal      Meal[]
}

model Manager {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String?
  name      String

  role       String      @default("manager")
  Restaurant Restaurant?

  @@map("managers")
}

model Meal {
  id           Int                 @id @default(autoincrement())
  name         String
  price        Float
  description  String
  type         String?             @default("") // general OR specific
  images       MealImage[]
  categories   CategoriesOnMeals[]
  restaurantId Int                 @default(2)
  restaurant   Restaurant          @relation(fields: [restaurantId], references: [id])

  @@map("meals")
}

model MealImage {
  id     Int    @id @default(autoincrement())
  url    String
  mealId Int
  Meal   Meal   @relation(fields: [mealId], references: [id])

  @@map("mealimages")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  meals CategoriesOnMeals[]

  @@map("categories")
}

model CategoriesOnMeals {
  meal       Meal     @relation(fields: [mealId], references: [id])
  mealId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([mealId, categoryId])
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  mealId   Int
  order    Order @relation(fields: [orderId], references: [id])
  orderId  Int

  @@map("orderitems")
}

model Order {
  id          Int        @id @default(autoincrement())
  price       Float
  createDate  DateTime?
  note        String?
  state       ORDERSTATE @default(PENDING)
  longitude   Float
  latitud     Float
  address     String
  scheduledAt String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int    @default(1)

  ordersItems OrderItem[]

  @@map("orders")
}

enum ORDERSTATE {
  DELIVERED
  PENDING
  FINISHED
}
